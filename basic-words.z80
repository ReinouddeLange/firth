;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; words
;;
;; forth word defintions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "decimal",7,0,decimal           ; pushes ptr to string and length on stack
    rst $08                             ; enter forth
    dw lit,10,base,store
    EXIT

defword "hex",3,0,hex                   ; pushes ptr to string and length on stack
    rst $08                             ; enter forth
    dw lit,16,base,store
    EXIT

defword "#base",5,0,hashbase            ; n --      ; switch to basel for one word
    rst $08
    dw base,fetch                       ; 16 base0
    dw swap, base, store                ; base0
    dw lit, $20, word, count            ; base0 addr length
    dw dup, zEqual
    cIf
        dw drop, drop                   ; base0
    cElse
        dw number                       ; base0 value error
        dw zNotEqual                    ; base0 value
        dw dup, dot
        cif
            dw drop                     ; base0
            dw litstr
            .pstr "Error: parsing"
            dw type
        cElse
            dw swap                     ; value base0
        cEndIf
    cEndif
    dw base, store                      ; restore base0
    EXIT

defword "#h",2,0,hashh                  ; switch to hex for one word
    rst $08                             ; enter forth
    dw lit,16,hashbase
    EXIT

defword "#d",2,0,hashd                  ; switch to decimal for one word
    rst $08                             ; enter forth
    dw lit,10,hashbase
    EXIT

defword "word",5,0,WORD                 ; delim -- c-addr
    rst $08                             ; enter forth
    dw lit, 64                          ; limit
    dw here, fetch
    dw xword                            ; writes to HERE!
    EXIT

defword ",cf",3,0,commacf                   ; adrs --
    rst $08                             ; enter forth
    dw here, fetch, storecf
    dw lit, 3, allot
    EXIT

defword "!cf",3,0,storecf                   ; adrs --
    rst $08                             ; enter forth
    dw lit, call_opcode, over, cstore
    dw oneplus, store
    EXIT

defword ">cfa",4,0,tcfa
    rst $08                             ; enter forth
    dw lit, 2, plus
    dw count
    dw lit, msk_length, and
    dw plus
    EXIT

; count extract string length from pascal string  ( ptr -- ptr+1 len )
defword "count",5,0,count
    rst $08                             ; enter forth
    dw dup, lit, 1, plus                ; ( ptr -- ptr ptr+1)
    dw swap, cfetch                     ; ( ptr ptr+1 -- ptr+1 len)
    EXIT

; allocate n bytes of memory                                   ( n -- ) allocate n bytes of memory
defword "allot",5,0,allot               ;
    rst $08                             ; enter forth
    dw here, addstore                   ; adds n to here
    EXIT

; negate  n1 -- n2                      negate n1
defword "negate",6,0,negate
    rst $08                             ; enter forth
    dw invert
    dw oneplus
    EXIT

; abs   n -- u                          absolute value
defword "abs",3,0,ABS                   ; case sensitive for ABS label for some reason
    rst $08                             ; enter forth
    dw dup                              ; copy arg
    dw zeroless
    cif
        dw negate                       ; if signs differ then negate answer
    cendif
    EXIT

; min   n1 n2 -- u                      minimum
defword "min",3,0,min
    rst $08
    dw over, over
    dw lessThan
    cif
        dw drop
    cElse
        dw swap, drop
    cendif
    EXIT

; max   n1 n2 -- u                      maximum
defword "max",3,0,max
    rst $08
    dw swap, min
    EXIT

defword "*",1,0,star                    ; u1 u2 -- ud
    rst $08                             ; enter forth
    dw over, over                       ; dupe both args
    dw ABS, swap, ABS                   ; remove sign from both args
    dw ustar, drop                      ; unsigned multiply, drop hi-word
    dw nrot                             ; move to bottom
    dw xor                              ; zero if signs are the same
    dw zeroless                         ; if high bit set
    cif
        dw negate                       ; if signs differ then negate answer
    cendif
    EXIT

defword "/mod",4,0,slashmod             ; dvend dvisr -- rem quot
    rst $08                             ; enter forth
    dw over, over                       ;       u1 u2 -- u1 u2 u1 u2  dupe both args
    dw xor                              ; u1 u2 u1 u2 -- u1 u2 b1     xor hi bits
    dw zeroless                         ; true if high bit still set
    dw nrot                             ;    u1 u2 b1 -- b1 u1 u2     move to bottom

    dw over                             ;    b1 u1 u2 -- b1 u1 u2 u1  dupe dividend
    dw zeroless                         ; b1 u1 u2 u1 -- b1 u1 u2 b2  zero if signs are the same
    dw nrot                             ; b1 u1 u2 b2 -- b1 b2 u1 u2  move to bottom

    dw ABS, swap, ABS, swap             ; remove sign from both args
    dw uslashmod                        ; b1 b2 u1 u2 -- b1 b2 r q    unsigned divide (remainder, quotient)
    dw swap                             ; b1 b2 u1 u2 -- b1 b2 q r
    dw rot                              ; b1 b2 q r -- b1 q r b2      bring to top
    cif
        dw negate                       ;   b1 q r b2 -- b1 q -r      if -ve then negate answer
    cendif
    dw nrot                             ;     b1 q -r -- -r b1 q     bring to top
    dw swap                             ;     -r b1 q -- -r q b1      bring to top
    cif
        dw negate                       ;     -r q b1 -- -r -q       if signs differ then negate answer
    cendif
    EXIT

defword "/",1,0,slash                   ; dvend dvisr -- quot
    rst $08                             ; enter forth
    dw slashmod
    dw swap, drop                       ; drop remainder
    EXIT

defword "mod",3,0,mod                   ; dvend dvisr -- remainder
    rst $08                             ; enter forth
    dw slashmod
    dw drop                             ; drop quotient
    EXIT

; using {"s",$22} because it's surprisingly difficult
; to define the name s" using asm80
defword {"s",$22},2,msk_immed,squote
    jr qt

defword $22,1,msk_immed,qt
    rst $08                             ; enter forth
    dw state, fetch, zequal
    cIf
        dw lit, $22                     ; delim
        dw lit, 63                      ; limit 63 + length
        dw latestStr, fetch
        dw lit, wordBuf, equal
        cIf
            dw lit, wordBuf2
        cElse
            dw lit, wordBuf
        cEndIf
        dw latestStr, store             ; store here in latestStr
        dw latestStr, fetch
        dw xword, count
    cElse
        dw lit, litstr, comma
        dw lit, $22, word
        dw cfetch, oneplus
        dw allot
    cEndif
    EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; flow control
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "if",2,msk_immed,if
    rst $08                             ; enter forth
    dw lbrace
    dw lit, zbranch, comma              ; compile 0branch
    dw here, fetch, dup, comma          ; compile here and also push on stack
    EXIT

defword "else",4,msk_immed,else
    rst $08                             ; enter forth
    dw lit, branch, comma               ; definite branch to just over the false-part
    dw here, fetch                      ; save here on stack
    dw lit, 0, comma                    ; compile a dummy offset
    dw swap                             ; now back-fill the original (if) offset
    dw xendif                           ; must call xendif not endif
    EXIT

defword "endif",5,msk_immed,endif
    rst $08                             ; enter forth
    dw xendif                           ; must call xendif not endif
    dw rbraceExec
    EXIT

xendif:                                 ; must call xendif not endif
    rst $08                             ; enter forth
    dw dup
    dw here, fetch, swap, minus         ; calculate the offset from the address saved on the stack
    dw swap, store                      ; store the offset in the back-filled location
    EXIT

; begin condition while ... repeat

defword "begin",5,msk_immed,begin
    rst $08                             ; enter forth
    dw lbrace
    dw here, fetch                      ; save here on stack (here1)
    EXIT

defword "while",5,msk_immed,while
    rst $08                             ; enter forth
    dw lit, zbranch, comma              ; compile branch on zero
    dw here, fetch                      ; save here in stack (here2)
    dw lit, 0, comma                    ; compile dummy offset
    EXIT

defword "repeat",6,msk_immed,repeat
    rst $08                             ; enter forth
    dw lit, branch, comma               ; compile branch
    dw swap                             ; tos = here1
    dw here, fetch, minus, comma        ; compile offset (here1 - here3)
    dw dup
    dw here, fetch, swap, minus         ; compile offset (here2 - here3)
    dw swap, store                      ; save offset in here2
    dw rbraceExec
    EXIT

; ; do
; ; i
; ; again
; ; loop
; ; j
; ; until

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; device
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; .s print stack (non-destructively)
defword ".s",2,0,dots                   ; ( -- )
    rst $08                             ; enter forth
    dw spfetch                          ; psp
    dw sp0, fetch                       ; psp0
    dw minus
    dw lit, 0, greaterThan
    cif
        dw sp0, fetch, lit, 2, plus
        cdo
            dw dup
            dw spfetch, lit, 2, minus
            dw swap, minus, zequal
        cuntil
            dw dup, fetch, dot
            dw lit, 2, plus
        cenddo
        dw drop
    cendif
    EXIT

; ." print string"
defword {".",$22},2,msk_immed,dotquote
    rst $08                             ; enter forth
    dw qt
    dw state, fetch, zequal
    cIf
        dw type
    cElse
        dw lit, type, comma
    cEndIf
    EXIT

defword "bl",2,0,bl
    rst $08                             ; enter forth
    dw lit, $20                         ; compile branch on zero
    EXIT
