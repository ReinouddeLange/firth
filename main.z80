.engine mycomputer

TESTMODE equ 0

.include "constants.z80"
.include "macros.z80"
.include "struct-macros.z80"
.include "dloop-macros.z80"
.include "compiler-macros.z80"

.org START_ROM
RST00:                                      ; Reset
    di                                      ; Disable interrupts
    jp START

.org $0008
RST08:                                      ; TX a character over RS232
    jp putc

.org $0010
RST10:                                      ; RX a character over RS232 Channel A [Console], hold here until char ready.
    jp getc

.org $0018
RST18:                                      ; Check serial status
    jp inputReady

.org $0038
RST38:                                      ; rst 38 - INTERRUPT VECTOR [ for IM 1 ]
    jp serialIn

.org $0066                                  ; rst 66 - NON-MASKABLE INTERRUPT
RST66:
    ret                                     ; do nothing

.include "utilities.z80"
.include "primitives.z80"
.include "words.z80"

START:
    ld SP, RET_STACK                        ; Initialise the return stack.
    ld IX, PAR_STACK                        ; Initialise the param stack.
    ld BC, 0                                ; TOS
    ld HL,serBuf
    ld (serInPtr),HL
    ld (serRdPtr),HL
    xor A                                   ; 0 to accumulator
    ld (serBufUsed),A
    ld A,RTS_LOW
    out ($80),A                             ; Initialise ACIA
    im 1
    ei

.if TESTMODE
    jp TESTS_START

.else
    jp QUIT
.endif

org START_RAM

.if TESTMODE

TESTS_START:

    .include "test-macros.z80"
.endif


.if TESTMODE = 1
    .include "tests.z80"
.endif

.if TESTMODE = 2

    ; TEST_SET_TEXT "hello\r\n"
    ; CALLWORD KEY
    ; EXPECT $68, "key 'h'"
    ; CALLWORD KEY
    ; EXPECT $65, "key 'e'"

    ; TEST_SET_TEXT "x"
    ; CALLWORD TOKEN
    ; EXPECT 1, "token 'x'"
    ; ppop H,L   ; drop

    ; TEST_SET_TEXT "xyz"
    ; CALLWORD TOKEN
    ; EXPECT 3, "token 'xyz'"
    ; ppop H,L   ; drop

    ; TEST_SET_TEXT "a xyz "
    ; CALLWORD TOKEN
    ; EXPECT 1, "token 'a xyz'"
    ; CALLWORD TOKEN
    ; EXPECT 3, "token 'a xyz'"
    ; ppop H,L   ; drop

    ; CALLWORD HERE
    ; CALLWORD FETCH
    ; EXPECT START_USER, "here"

    ; ppushText "xyz",3
    ; CALLWORD CREATE
    ; CALLWORD LATEST
    ; CALLWORD FETCH
    ; EXPECT START_USER, "create xyz latest"
    ; CALLWORD HERE
    ; CALLWORD FETCH
    ; EXPECT START_USER + 6, "create xyz here"

    ppushValue 1
    TEST_SET_TEXT "dup"
    CALLWORD INTERPRET
    EXPECT 1, "1 interpret dup"
    EXPECT 1, "1 interpret dup 2"

    ; TEST_SET_TEXT "123"
    ; CALLWORD INTERPRET
    ; EXPECT 123, "interpret 123"

    ; ppushValue 999
    ; TEST_SET_TEXT "$$123"
    ; CALLWORD INTERPRET
    ; EXPECT 999, "interpret $$123"

    ; ppushValue 1
    ; ppushValue 2
    ; CALLWORD DUP
    ; EXPECT 2, "dup 2"
    ; EXPECT 2, "dup 2"

    ; TEST_SET_TEXT "x123"
    ; ppushValue 123
    ; CALLWORD CONSTANT
    ; TEST_SET_TEXT "x123"
    ; CALLWORD INTERPRET
    ; EXPECT 123, "constant x123 = 123"

.endif

.if TESTMODE
    PRINT_STR DONE
    halt
.endif

.include "variables.z80"

START_USER:                                 ; user allocated data starts here
