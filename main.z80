.engine mycomputer

TESTMODE equ 0

.include "constants.z80"
.include "macros.z80"
.include "struct-macros.z80"
.include "dloop-macros.z80"
.include "compiler-macros.z80"

.org START_ROM
RST00:                                      ; Reset
    di                                      ; Disable interrupts
    jp START

.org $0008
RST08:                                      ; TX a character over RS232
    jp putc

.org $0010
RST10:                                      ; RX a character over RS232 Channel A [Console], hold here until char ready.
    jp getc

.org $0018
RST18:                                      ; Check serial status
    jp inputReady

.org $0038
RST38:                                      ; rst 38 - INTERRUPT VECTOR [ for IM 1 ]
    jp serialIn

.org $0066                                  ; rst 66 - NON-MASKABLE INTERRUPT
RST66:
    ret                                     ; do nothing

.include "utilities.z80"
.include "primitives.z80"
.include "words.z80"

START:
    ld SP, RET_STACK                        ; Initialise the return stack.
    ld IX, PAR_STACK                        ; Initialise the param stack.
    ld BC, 0                                ; TOS
    ld HL,serBuf
    ld (serInPtr),HL
    ld (serRdPtr),HL
    xor A                                   ; 0 to accumulator
    ld (serBufUsed),A
    ld A,RTS_LOW
    out ($80),A                             ; Initialise ACIA
    im 1
    ei

.if TESTMODE
    jp TESTS_START

.else
    PRINT_STR TXT_INTRO
    ld DE, COLD                             ; Initialise interpreter.
    NEXT
.endif

org START_RAM

.if TESTMODE

TESTS_START:

    .include "test-macros.z80"
.endif


.if TESTMODE = 1
    .include "tests.z80"
.endif

.if TESTMODE = 2

    ppushValue 1
    ppushText "dup",3
    callWord interp2
    EXPECT 1, "1 dup 3 interp2 - 1"
    EXPECT 1, "1 dup 3 interp2 - 2"

    TEST_SET_TEXT "x123"
    ppushValue 123
    ppushText "constant",8
    callWord interp2

    ppushText "x123",4
    callWord interp2
    EXPECT 123, "constant x123 = 123"

    ppushText "3",1
    callWord interp2
    EXPECT 3, "TOS = 3"

    callWord RBRAC
    ld BC,(VAR_STATE)
    EXPECT 1, "] starts compile state"

    ld BC,(VAR_HERE)

    ppushText "3",1
    callWord interp2
    ppushText "dup",3
    callWord interp2

    ld HL,(VAR_HERE)
    or a
    SBC HL,BC
    loadWord B,C, H,L
    EXPECT 6, "latest - oldlatest = 6"

    ppushText "[",1         ; immediate word executes even in compile mode
                            ; ends compile state
    callWord interp2
    EXPECT 0, "] starts compile state"

.endif

.if TESTMODE
    PRINT_STR DONE
    halt
.endif

.include "variables.z80"

START_USER:                                 ; user allocated data starts here
