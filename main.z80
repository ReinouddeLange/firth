.engine mycomputer

TESTMODE equ 0

.include "constants.z80"
.include "macros.z80"
.include "struct-macros.z80"
.include "dloop-macros.z80"
.include "compiler-macros.z80"

.org START_ROM
RST00:                                      ; Reset
    di                                      ; Disable interrupts
    jp start

.org $0008
RST08:                                      ; Check serial status
    jp enter

.org $0010
RST10:                                      ; TX a character over RS232
    jp putc

.org $0018
RST18:                                      ; RX a character over RS232 Channel A [Console], hold here until char ready.
    jp getc

.org $0020
RST20:                                      ; Check serial status
    jp inputReady

.org $0038
RST38:                                      ; rst 38 - INTERRUPT VECTOR [ for IM 1 ]
    jp serialIn

.org $0066                                  ; rst 66 - NON-MASKABLE INTERRUPT
RST66:
    ret                                     ; do nothing

.include "utilities.z80"
.include "primitives.z80"
.include "words.z80"
.include "extended-words.z80"
.include "def-words.z80"

start:
    ld SP, RET_STACK                        ; Initialise the return stack.
    call intialize

.if TESTMODE
    jp TESTS_START

.else
    PRINT_STR TXT_INTRO
    jp QUIT
.endif

org START_RAM

.if TESTMODE

TESTS_START:

    .include "test-macros.z80"
.endif


.if TESTMODE = 1
    .include "tests.z80"
.endif

.if TESTMODE = 2

TEST_SET_TEXT "23 constant y"
INTERPRET
TEST_SET_TEXT "y"
INTERPRET
EXPECT 23, "expect 23"

.endif

.if TESTMODE
    PRINT_STR DONE
    halt

testSF:                                 ; n -- addr return addr of param n, -ve args, +ve locals
    rst $08                             ; enter forth
    dw beginFrame
    dw lit, 100
    dw lit, 200
    dw lit, 300
    dw p3, dot
    dw p2, dot
    dw p1, dot
    dw cr
    dw lit, 0, param, fetch, dot
    dw cr
    dw v1, fetch, dot
    dw v2, fetch, dot
    dw v3, fetch, dot
    dw drop, drop, drop                 ; clean up locals
    dw endFrame
    dw exit
    ret

.endif

.include "variables.z80"

START_USER:                                 ; user allocated data starts here
