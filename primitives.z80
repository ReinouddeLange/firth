FORTH:
    pop HL
    ld E,(HL)
    inc HL
    ld D,(HL)
    inc HL
    push HL
    ex DE,HL
    ld DE, forth
    push DE
    jp (HL)

EXIT:
    pop HL
    ret

; words must preserve: BC, DE, SP, IX
; words may destroy: HL, IY, AF, AF', BC', DE' HL'

defword "words", 5, 0, WORDS
    push BC
    push DE
    call listWords
    pop DE
    pop BC
    ret

defword "find",4,0,FIND
    ppop0 H,L

    push DE
    call lookup                     ; params: HL = string address, BC = string length
                                    ; returns: DE = found header ptr or 0
    loadWord B,C, D,E
    pop DE

    ret

defword "execute",7,0,EXECUTE
    ppop H,L                     ; POP TOS into HL
    jp (hl)                         ; go do Forth word

defword "number",6,0,NUMBER             ; ( ptr len -- num err )
    ppop0 H,L

    push DE
	call toNumber                   ; params: HL = string address, BC = string length
			                        ; Returns the parsed number in DE,
	                                ; BC = 0, success
    ppush0 D,E
    pop DE

    ret

defword "print",5,0,PRINT
    push DE
    ppop D,E
    call printPStr
    pop DE
    ret

; defword "word",4,0,WORD                 ; delim -- addr length
;     push DE
;     loadWord D,E, B,C                   ; E = delim
;     call getWord
;     ppush0 D,E                          ; DE = str ptr
;     pop DE
;     ret

defword "word1",5,0,WORD1               ; delim -- c-addr
    ld HL, (VAR_HERE)                   ; writes to HERE!
    ppush H,L
    call XWORD
    ret

defword "(word)",6,0,XWORD                ; delim addr -- c-addr
    ppop H,L
    ld A,C
    ld E,A
    call getWord1
    loadWord B,C, H,L                   ; TOS = str ptr
    ret

defword "+!",2,0,ADDSTORE               ; (n addr -- )
	ppop H, L		            ; HL = address, TOS = amount to add
	ld A,(HL)
	add A,C                         ; add TOS at (HL),
	ld (HL),A
	inc HL
	ld A,(HL)
	adc A,B
	ld (HL),A
	ppop0 B,C                      ; clear param stack
    ret

defword "[",1,MSK_IMMED,LBRAC
	ld HL, 0
	ld (VAR_STATE), HL	; Set STATE to 0.
    ret

defword "]",1,0,RBRAC
	ld HL, 1
	ld (VAR_STATE), HL	; Set STATE to 1.
    ret

defword "hidden",6,0,HIDDEN
    ppop H,L		            ; HL = Dictionary entry.
    inc HL
    inc HL                      ; Point to name/flags byte.

    ld A, (HL)
    xor MSK_HIDDEN        	    ; Toggle the HIDDEN bit.
    ld (HL), A
    ret

; 1+      n1/u1 -- n2/u2            add 1 to TOS
defword "1+",2,0,ONEPLUS
    inc BC
    ret

; 2+      n1/u1 -- n2/u2            add 2 to TOS
defword "2+",2,0,TWOPLUS
    inc BC
    inc BC
    ret

; 1*      n1/u1 -- n2/u2            do nothing
defword "noop",4,0,noop
    ret

; ?branch   x --              branch if TOS zero
defword "0branch",7,0,ZBRANCH
    checkZeroWord B,C               ; test old TOS
    ppop0 B,C                       ; POP new TOS
    jr z,BRANCH                     ; if old TOS=0, branch
    pop HL                          ; ret address = FORTH
    pop DE
    inc DE                          ; else skip inline value
    inc DE
    push DE
    jp (HL)

defword "branch",6,0,BRANCH         ; relative branching
    pop HL                          ; throw away return
    pop HL                          ; add the offset to the instruction pointer
    ld E,(HL)
    inc HL
    ld D,(HL)
    dec HL
    add HL,DE
    push HL
    jp FORTH

defword "lit",3,0,LIT

	ppush0 B,C                      ; pushTOS
    pop DE                          ; pop return address into DE
	pop HL                          ; pop address of next Forth word in HL
	readWord HL, B,C                ; read next word and push on TOS, inc HL by 2
    push HL                         ; push address of next Forth word
    ex DE,HL                        ; push return address in HL
    jp (HL)                         ; return to caller

; U*   u1 u2 -- ud   unsigned mutliply
defword "u*",2,0,USTAR              ; u1 u2 -- ud
    push DE
                                    ; u2 in BC
    ppop0 D,E                       ; u1 in DE
	call unsignedMultiply
    ppush0 D,E                      ; udlo result
                                    ; udhi result
    pop DE
    ret

;C 0<     n -- flag      true if TOS negative
defword "0<",2,0,ZEROLESS
    sla b           ; sign bit -> cy flag
    sbc a,a         ;
    and 1            ; <0 = -1, >0 = 0
    ld b,0
    ld c,a
    ret

;z RSP!  a-addr --                  set return stack pointer
defword "rsp!",4,0,RSPSTORE
    SET_RET_SP B,C
	ppop0 B,C                      ; POP TOS
    ret

defword "sp@",3,0,SPFETCH
    push IX
    pop HL
    ppush H,L
    ret

defword "sp!",3,0,SPSTORE
    ppop H,L
    push HL
    pop IX
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; memory access
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; !        x a-addr --   store cell in memory
defword "!",1,0,STORE
    ppop H,L
    writeWord HL, B,C
    ppop0 B,C          ; POP new TOS
    ret

defword ",",1,0,COMMA
	ld HL, (VAR_HERE)	; HERE
	writeWord HL, B,C
	ld (VAR_HERE), HL	; Update HERE (incremented)
	ppop0 B,C		        ; cleanup TOS
    ret

defword "@",1,0,FETCH
    loadWord H,L, B,C ; HL = TOS
    readWord HL, B,C
    ret

; CELL+    c-addr1 -- c-addr2   add cell size to addr
defword "cell+",5,0,CELLPLUS
    jp twoplus

; CELLS   ( n1 -- n2 ) n2 is the size in address units of n1 cells.
defword "cells",5,0,CELLS
    jp twostar

; C!      char c-addr --    store char in memory
defword "c!",2,0,CSTORE
    ppop H,L
    ld (HL),C
    ppop0 B,C          ; POP new TOS
    ret

defword "c,",1,0,CCOMMA
    ppush0 H,L
	ld HL, (VAR_HERE)	; HERE
	ld (HL), C          ; Store DE at memory pointed to by VAR_HERE
	inc HL
	ld (VAR_HERE), HL	; Update HERE (incremented)
    ppop0 H,L
	ppop0 B,C		        ; cleanup TOS
    ret

; C@     c-addr -- char   fetch char from memory
defword "c@",2,0,CFETCH
    ld A,(BC)
    ld C,A
    ld B,0
    ret

; CHAR+    c-addr1 -- c-addr2   add char size to addr
defword "char+",5,0,CHARPLUS
    jp oneplus

; CELLS   ( n1 -- n2 ) n2 is the size in address units of n1 cells.
defword "chars",5,0,CHARS
    jp noop


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; arithmetic
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; */MOD star-slash-mod

; +       n1/u1 n2/u2 -- n3/u3     add n1+n2
defword "+",1,0,PLUS
    ppop0 H,L
    add HL,BC
    loadWord B,C, H,L
    ret

; 2*      n1/u1 -- n2/u2            arithmetic left shift
defword "2*",2,0,TWOSTAR
    sla C
    rl B
    ret

defword "-",1,0,MINUS
    ppop0 H,L
    or A
    sbc HL,BC
    loadWord B,C, H,L
    ret

; U/MOD   u1 u2 -- u1 u2    unsigned 16 / 16 -> r q
defword "u/mod",5,0,USLASHMOD
    push DE
    ppop D,E                ; DE = divisor
                            ; BC = dividend
    call divideWordByWord
    pop DE

    ppush0 H,L           ; PUSH remainder,
    ret

; 2/      x1 -- x2                  arithmetic right shift
defword "2/",2,0,TWOSLASH
    sra B
    rr C
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; logic
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0= zero-equals
defword "0=",2,0,ZEQUAL
    checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
    ; jr z, ZE1
    _if nz
        ld BC, -1
    _endif
    inc BC
    ret

; and    x1 x2 -- x3            logical and
defword "and",3,0,and	        ; bitwise and
    ppop0 H,L
    ld A,b
    and H
    ld B,A
    ld A,C
    and L
    ld C,A
    ret

; INVERT x1 -- x2               ; bitwise complement
defword "invert",6,0,INVERT
    ld A,B
    cpl
    ld B,A
    ld A,C
    cpl
    ld C,A
    ret

; TRUE
defword "true",4,0,TRUE
    ppush0 B,C
    ld BC,1
    ret

; LSHIFT  x1 u -- x2       logical L shift u places
defword "lshift",6,0,LSHIFT
    ppop0 H,L              ;   NB: hi 8 bits ignored!
    ld B,C              ; b = loop counter
    inc B               ; test for counter=0 case
    jr LSHIFT2
    _do
        add HL,HL        ; left shift HL, n times
LSHIFT2:
    _djnz
    loadWord B,C, H,L     ; result is new TOS
    ret

; =      x1 x2 -- flag         test x1=x2
defword "=",1,0,EQUALS
    ppop0 H,L
    or A
    sbc HL,BC       ; x1-x2 in HL, SZVC valid
    _if nz
        ld BC, 1       ;   if -ve, result true
    _endif
    inc BC
    ret

; <      n1 n2 -- flag          test n1<n2
defword "<",1,0,LESSTHAN	        ; less than
    ppop0 H,L
    or A
    sbc HL,BC       ; n1-n2 in HL, SZVC valid
    ; jp pe,revsense  ; if OV, use rev. sense
    _if pe
        ; jp m,tosfalse ; OV: if -ve, reslt false
        ; jr tostrue      ;     if +ve, result true
        _if m
            ld bc, 0
        _else
            ld bc, 1       ;   if -ve, result true
        _endif
    _else
        ; jp p,tosfalse   ;   if +ve, result false
        ; jp tostrue
        _if p
            ld bc, 0
        _else
            ld bc, 1       ;   if -ve, result true
        _endif
    _endif
    ret

; >      n1 n2 -- flag          test n1 > n2
defword ">",1,0,GREATERTHAN	        ; less than
    ppop0 H,L                  ; swap operands
    ppush H,L
    jr LESSTHAN

; OR    x1 x2 -- x3             logical OR
defword "or",2,0,OR	            ; bitwise OR
    ppop0 H,L
    ld A,B
    or H
    ld B,A
    ld A,C
    or L
    ld C,A
    ret

; xor    x1 x2 -- x3            logical xor
defword "xor",3,0,xor	        ; bitwise xor
    ppop0 H,L
    ld A,B
    xor H
    ld B,A
    ld A,C
    xor L
    ld C,A
    ret

; FALSE
defword "false",5,0,FALSE
    ppush0 B,C
    ld BC,0
    ret

;RSHIFT  x1 u -- x2    logical R shift u places
defword "rshift",6,0,RSHIFT
    ppop0 H,L         ;   NB: hi 8 bits ignored!
    ld B,C              ; b = loop counter
    inc B               ; test for counter=0 case
    jr RSHIFT2
    _do
        srl H           ; right shift HL, n times
        rr L
RSHIFT2:
    _djnz
    loadWord B,C, H,L     ; result is new TOS
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; stack
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


defword "dup",3,0,DUP        ; x -- x x
    ppush0 B,C
    ret

; SWAP     x1 x2 -- x2 x1    swap top two items
defword "swap",4,0,SWAP      ; x1 x2 -- x2 x1
    push DE
    ppop0 D,E
    ppush D,E
    pop DE
    ret

defword "rot",3,0,ROT       ; x1 x2 x3 -- x2 x3 x1
    push DE
                            ; x3 in BC
    ppop0 D,E               ; x2 in DE
    ppop0 H,L               ; x1 in HL
    ppush0 D,E              ; x2 on stack
    ppush H,L               ; PUSH x1 - x2 x3 x1
                            ; x1 in BC
    pop DE
    ret

defword "-rot",4,0,NROT     ; x1 x2 x3 -- x3 x1 x2
    push DE
                            ; x3 in BC
    ppop0 D,E               ; x2 in DE
    ppop0 H,L               ; x1 in HL
    ppush H,L               ; PUSH x1 - x3 x1
    ppush D,E               ; PUSH x2 - x3 x1 x2
                            ; x2 in BC
    pop DE
    ret

; >R    ( x -- ) ( R: -- x )  Move  x from TOS to the return stack.
defword ">r",2,0,TOR
    LD IY,0
    ADD IY,SP
    LD (IY+6),C
    LD (IY+7),B
    ppop0 B,C
    ret

; R@ r-fetch

defword "drop",4,0,DROP      ; x --
    ppop0 B,C		    ; drop top of stack
    ret

; OVER    x1 x2 -- x1 x2 x1
defword "over",4,0,OVER
    ppop0 H,L
    ppush0 H,L
    ppush H,L
    ret

; R>    ( -- x ) ( R: x -- )  Move x from the return stack to TOS
defword "r>",2,0,RFROM
    ppush0 B,C
    LD IY,0
    ADD IY,SP
    LD C,(IY+6)
    LD B,(IY+7)
    ret

defword "'",1,0,TICK                 ; ( -- addr ) PUSH code word ptr of following word
    jp LIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; definitions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "immediate",9,MSK_IMMED,IMMEDIATE
    ld HL, (VAR_LATEST)                 ; get head of latest word
    inc HL                              ; point to flags byte
    inc HL
    ld a, MSK_IMMED
    xor (HL)                            ; toggle the IMMED bit.
    ld (HL),a
    ret


; DOES> does

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; device
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "accept",6,0,ACCEPT              ; ( addr max -- len )
    push DE
    ppop D,E                    ; max - up to 255
	ppop0 H,L                          ; addr
    call getline
    pop DE
    ret

defword "key",3,0,KEY                ; ( -- c )
	call getKey
    ld b, 0
    ld c, a
    ret

defword "emit",4,0,EMIT              ; print the character on the stack
	ld A, C                     ; (c -- )
	call putc
    ppop0 B,C                      ; clear stack
    ret

defword "key?",4,0,QKEY              ; ( -- c )
	ppush0 B,C		                ; save TOS
	call inputReady
    ld BC, 1                    ; TOS = true
    _if z
        ld BC, 0                    ; TOS = false
    _endif
    ret

defword ".",1,0,DOT                 ; print top of stack in BASE
    call printNum
    ppop0 B,C
    ret

defword "type",4,0,TYPE             ; ( str len -- )
    push DE
    ppop0 D,E                    ; DE = str BC = length
    call printStr
    ppop0 B,C                    ; clear TOS
    pop DE
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; destroys: HL, AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defword "interp",6,0,interp             ; ( -- c )
    push DE
    ppush0 B,C                          ; save TOS
    ld DE, $20                          ; delim = ' '
    ld HL, wordBuf
    call getWord1
    call interpToken1
    _switch
        or A
        _case z
            loadWord B,C, D,E
            pop DE
        _endcase

        cp 1
        _case z
            ppop0 B,C                ; clear TOS
            pop DE
        _endcase

        cp 2
        _case z
            loadWord H,L, B,C
            ppop0 B,C                ; clear TOS
            pop DE
            jp (HL)              ; execute word
        _endcase
    _endswitch

    ret
