;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; macros
;;
;; macros used by forth and a few utility routines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.macro NEXT
    NEXT_1
.endm

.macro NEXT_1
    ret
.endm

; Store the chain of links.
link: .set 0

; .macro defword, name, namelen, flags, label

; HEADER_label:
;     DW link		            ; link

; link: .set HEADER_label

;     DB flags + namelen	    ; flags + length byte
;     DB name		            ; the name
; label:
;     jp DOCOLON
;     ; list of word pointers follow
; .endm

.macro defcode, name, namelen, flags, label

HEADER_label:
    DW link		            ; link

link: .set HEADER_label

    DB flags + namelen	; flags + length byte
    DB name		    ; the name
label:
.endm

.macro defvar, name, namelen, flags, label, var_label
defcode name,namelen,flags,label
    ppush0 B,C
    ld BC, var_label
NEXT
.endm

.macro defconst, name, namelen, flags, label, value
defcode name,namelen,flags,label
    ppush0 B,C
    ld BC, value
NEXT
.endm

; Macros to deal with the param stack.
.macro ppush0, regHI, regLO
    dec IX              ; PUSH register pair on ret stack
    ld (IX+0),regHI
    dec IX
    ld (IX+0),regLO
.endm

.macro ppop0, regHI, regLO
    ld regLO,(IX+0)     ; POP register pair from ret stk
    inc IX
    ld regHI,(IX+0)
    inc IX
.endm

; Macros to deal with the param stack with TOS in BC
.macro ppush, regHI, regLO
    ppush0 B,C             ; push TOS reg pair
    ld B, regHI         ; move register pair into TOS reg pair
    ld C, regLO
.endm

.macro ppop, regHI, regLO
    ld regHI, B         ; move TOS reg pair into register pair
    ld regLO, C
    ppop0 B,C
.endm

.macro ppushValue, val
    ppush0 B,C
    ld BC, val
.endm

.macro ppushText, s1, len
    ppushValue tpt_text%%M
    ppushValue len
    _skip
tpt_text%%M:
        db s1
    _endskip
.endm

.macro ppushPText, s1
    ppushValue tpt_text%%M
    ld BC, tpt_text%%M
    _skip
tpt_text%%M:
        .pstr s1
    _endskip
.endm

; Macros to deal with the return stack.
.macro PUSH_RET, regHI, regLO
    push regHIregLO
.endm

.macro POP_RET, regHI, regLO
    pop regHIregLO
.endm

.macro SET_RET_SP
    loadWord H,L, B,C
    LD SP, HL
.endm

.macro SAVE_REGS, regHI, regLO    ; Swap register bank and transfer TOS to regTOS
    ppush0 B,C             ; only use if word doesn't execute other words
    exx
    ppop0 regHI, regLO
.endm

.macro RESTORE_REGS, regHI, regLO ; Swap register bank and transfer regTOS to TOS
    ppush0 regHI, regLO         ; only use if word doesn't execute other words
    exx
    ppop0 B,C
.endm

.macro loadWord, destHI, destLO, srcHI, srcLO    ; transfer from src reg pair to dest reg pair
    ld destLO, srcLO
    ld destHI, srcHI
.endm

; works with HL, IX+d, IY+d
.macro readWord, ptr, regHI, regLO
    ld regLO, (ptr)
    inc ptr
    ld regHI, (ptr)
    inc ptr
.endm

; works with HL, IX+d, IY+d
.macro writeWord, ptr, regHI, regLO
    writeByte ptr, regLO
    writeByte ptr, regHI
.endm

; works with HL, IX+d, IY+d
.macro writeByte, ptr, reg
    ld (ptr), reg
    inc ptr
.endm

; result: sets Z if zero
; destroys: A
.macro checkZeroWord, regHI, regLO          ; check if reg pair is zero
    ld A, regLO
    or regHI
.endm

.macro PRINT_STR, addr
    ppush0 D,E
    ld DE, addr
    call printPStr
    ppop0 D,E
.endm

.macro CMP16, val
    ld DE, val
    or A
    sbc HL, DE
    checkZeroWord H,L
.endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CallWord
; params HL=address of word CFA
; destroys DE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.macro callWord, name
    call name
.endm
