;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; words
;;
;; forth word defintions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "word",5,0,WORD                 ; delim -- c-addr
    rst $08                             ; enter forth
    dw lit, 64                          ; limit
    dw here, fetch
    dw xword                            ; writes to HERE!
    EXIT

defword ">cfa",4,0,tcfa
    rst $08                             ; enter forth
    dw lit, 2, plus
    dw count
    dw lit, msk_length, and
    dw plus
    EXIT

; count extract string length from pascal string  ( ptr -- ptr+1 len )
defword "count",5,0,count
    rst $08                             ; enter forth
    dw dup, lit, 1, plus                ; ( ptr -- ptr ptr+1)
    dw swap, cfetch                     ; ( ptr ptr+1 -- ptr+1 len)
    EXIT

; allocate n bytes of memory                                   ( n -- ) allocate n bytes of memory
defword "allot",5,0,allot               ;
    rst $08                             ; enter forth
    dw here, addstore                   ; adds n to here
    EXIT

; abs   n -- u                          absolute value
defword "abs",3,0,ABS                   ; case sensitive for ABS label for some reason
    rst $08                             ; enter forth
    dw dup                              ; copy arg
    dw zeroless
    cif
        dw negate                       ; if signs differ then negate answer
    cendif
    EXIT

; negate  n1 -- n2                      negate n1
defword "negate",6,0,negate
    rst $08                             ; enter forth
    dw invert
    dw oneplus
    EXIT

defword "bl",2,0,bl
    rst $08                             ; enter forth
    dw lit, $20                         ; compile branch on zero
    EXIT

defword "interpret",6,0,interpret
    rst $08
    cDo
    	dw bl, word, count        ; pstr -- ptr len
        dw dup, zEqual
        cIf
            dw drop, drop                           ; ptr len --
            EXIT
        cEndif
        dw interpToken                       ; interpret the next word
    cEndDo
    EXIT

defword "interpToken",11,0,interpToken          ; ptr len --
    rst $08
    dw over, over, find                     ; ptr len -- ptr len addr
    dw dup, zNotEqual
    cIf
        dw interpWord
    cElse
        dw interpLiteral
    cEndif
    EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; flow control
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "if",2,msk_immed,if
    rst $08                             ; enter forth
    dw lbrace
    dw lit, zbranch, comma              ; compile 0branch
    dw here, fetch, dup, comma          ; compile here and also push on stack
    EXIT

defword "else",4,msk_immed,else
    rst $08                             ; enter forth
    dw lit, branch, comma               ; definite branch to just over the false-part
    dw here, fetch                      ; save here on stack
    dw lit, 0, comma                    ; compile a dummy offset
    dw swap                             ; now back-fill the original (if) offset
    dw xendif                           ; must call xendif not endif
    EXIT

defword "endif",5,msk_immed,endif
    rst $08                             ; enter forth
    dw xendif                           ; must call xendif not endif
    dw rbraceExec
    EXIT

xendif:                                 ; must call xendif not endif
    rst $08                             ; enter forth
    dw dup
    dw here, fetch, swap, minus         ; calculate the offset from the address saved on the stack
    dw swap, store                      ; store the offset in the back-filled location
    EXIT

; begin condition while ... repeat

defword "begin",5,msk_immed,begin
    rst $08                             ; enter forth
    dw lbrace
    dw here, fetch                      ; save here on stack (here1)
    EXIT

defword "while",5,msk_immed,while
    rst $08                             ; enter forth
    dw lit, zbranch, comma              ; compile branch on zero
    dw here, fetch                      ; save here in stack (here2)
    dw lit, 0, comma                    ; compile dummy offset
    EXIT

defword "repeat",6,msk_immed,repeat
    rst $08                             ; enter forth
    dw lit, branch, comma               ; compile branch
    dw swap                             ; tos = here1
    dw here, fetch, minus, comma        ; compile offset (here1 - here3)
    dw dup
    dw here, fetch, swap, minus         ; compile offset (here2 - here3)
    dw swap, store                      ; save offset in here2
    dw rbraceExec
    EXIT

; using {"s",$22} because it's surprisingly difficult
; to define the name s" using asm80
defword {"s",$22},2,msk_immed,squote
    jr qt

defword $22,1,msk_immed,qt
    rst $08                             ; enter forth
    dw state, fetch, zequal
    cIf
        dw lit, $22                     ; delim
        dw lit, 63                      ; limit 63 + length
        dw latestStr, fetch
        dw lit, wordBuf, equal
        cIf
            dw lit, wordBuf2
        cElse
            dw lit, wordBuf
        cEndIf
        dw latestStr, store             ; store here in latestStr
        dw latestStr, fetch
        dw xword, count
    cElse
        dw lit, litstr, comma
        dw lit, $22, word
        dw cfetch, oneplus
        dw allot
    cEndif
    EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; non-standard words
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "{",1,msk_immed,lbrace
    rst $08                             ; enter forth
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw here, fetch                  ; TOS = here
        dw lit, rst08_opcode, ccomma    ; write z80 jp opcode to word
    cEndIf
    dw nestPlus                         ; increase nesting
    EXIT                             ; return from the function.

defword "}",1,msk_immed,rbrace
    rst $08                             ; enter forth
    dw nestMinus                        ; reduce nesting
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw lit, exit, comma                 ; append exit (so the word will return).
    cEndIf
    EXIT                             ; return from the function.

defword "}exec",5,msk_immed,rbraceExec
    rst $08                             ; enter forth
    dw rbrace
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw dup
        dw here, store
        dw execute
    cEndIf
    EXIT                             ; return from the function.

